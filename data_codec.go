// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package gosercomp

import (
	"errors"
	"runtime"
	"strconv"

	codec1978 "github.com/ugorji/go/codec"
)

const (
	// ----- content types ----
	codecSelferCcUTF88885 = 1
	codecSelferCcRAW8885  = 255
	// ----- value types used ----
	codecSelferValueTypeArray8885     = 10
	codecSelferValueTypeMap8885       = 9
	codecSelferValueTypeString8885    = 6
	codecSelferValueTypeInt8885       = 2
	codecSelferValueTypeUint8885      = 3
	codecSelferValueTypeFloat8885     = 4
	codecSelferValueTypeNil8885       = 1
	codecSelferBitsize8885            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil8885 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct8885 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer8885 struct{}

func codecSelfer8885False() bool { return false }

func init() {
	if codec1978.GenVersion != 16 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 16, need " + ver + ". Re-generate file: " + file)
	}
}

func (x *ColorGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.Id))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayElem()
			if x.Colors == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Colors, e)
			} // end block: if x.Colors slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"id\"")
			} else {
				r.EncodeString(`id`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.Id))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"name\"")
			} else {
				r.EncodeString(`name`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Name))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"colors\"")
			} else {
				r.EncodeString(`colors`)
			}
			z.EncWriteMapElemValue()
			if x.Colors == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Colors, e)
			} // end block: if x.Colors slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *ColorGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8885 {
		*(x) = ColorGroup{}
	} else if yyct2 == codecSelferValueTypeMap8885 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8885 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8885)
	}
}

func (x *ColorGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "id":
			x.Id = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize8885))
		case "name":
			x.Name = (string)(string(r.DecodeStringAsBytes()))
		case "colors":
			z.F.DecSliceStringX(&x.Colors, d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *ColorGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Id = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize8885))
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(string(r.DecodeStringAsBytes()))
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Colors, d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *RlpColorGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Id))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayElem()
			if x.Colors == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Colors, e)
			} // end block: if x.Colors slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"id\"")
			} else {
				r.EncodeString(`id`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Id))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"name\"")
			} else {
				r.EncodeString(`name`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Name))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"colors\"")
			} else {
				r.EncodeString(`colors`)
			}
			z.EncWriteMapElemValue()
			if x.Colors == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Colors, e)
			} // end block: if x.Colors slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *RlpColorGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8885 {
		*(x) = RlpColorGroup{}
	} else if yyct2 == codecSelferValueTypeMap8885 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8885 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8885)
	}
}

func (x *RlpColorGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "id":
			x.Id = (uint64)(r.DecodeUint64())
		case "name":
			x.Name = (string)(string(r.DecodeStringAsBytes()))
		case "colors":
			z.F.DecSliceStringX(&x.Colors, d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *RlpColorGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8885
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Id = (uint64)(r.DecodeUint64())
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(string(r.DecodeStringAsBytes()))
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Colors, d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}
